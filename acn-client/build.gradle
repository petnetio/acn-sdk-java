jar.doFirst {
    from sourceSets.main.allSource
    manifest {
        attributes(
            "Implementation-Title": "Arrow Connect Client",
            "Implementation-Version": version,
            "Implementation-Vendor": "Arrow Electronics, Inc.",
            "Built-By": System.getProperty('user.name'),
            "Built-Date": new Date().format("yyyy-MM-dd"),
            "Built-Jdk": "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
            "Git-Branch": getCurrentGitBranch(),
            "Git-Last-Commit": getLastGitCommit())
    }
}

dependencies {      
    compile("org.apache.httpcomponents:httpclient:${httpclientVersion}")
    
    compile("org.bouncycastle:bcprov-jdk16:1.46")    
    // compile("commons-codec:commons-codec:1.11")

    compile("org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0")

    // ibm
    compile("com.ibm.messaging:watson-iot:0.2.6")
    
    // azure
    compile("com.microsoft.azure.sdk.iot:iot-device-client:1.14.0")
        
    //fix for libraries incompatibility
    compile("org.bouncycastle:bcprov-jdk15on:1.55")
    compile("org.bouncycastle:bcpkix-jdk15on:1.55")
        
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")
    
    compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-core:${log4jVersion}")    
   
    testCompile("junit:junit:4.+")
    testCompile("org.apache.commons:commons-lang3:3.8.1")    
    testCompile("com.rabbitmq:amqp-client:5.6.0")
    testCompile("org.springframework.amqp:spring-rabbit:2.0.1.RELEASE")
    compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.11.1'    
    
    compile fileTree(dir: '../lib', include: '*.jar')    
}


def jarToCopy = copySpec {
    from "build/libs/${jar.archiveName}"
}

task copyJar(dependsOn: jar) {
    doLast {
        copy {
            with jarToCopy
            into "../../lib"
        }
        copy {
            with jarToCopy
            into "../../kronos/lib"
        }
        copy {
            with jarToCopy
            into "../../selene/lib"
        }
        copy {
            with jarToCopy
            into "../../hyperion/lib"
        }
        copy {
            with jarToCopy
            into "../../apollo/lib"
        }
    }
}

task jenkinsInput() {
    doLast {
       delete fileTree('lib') {
           include '**/acs*'
       }
       copy {
           from('/data1/jenkins/workspace/global-libs')  { include '**/acs*' }
           into 'lib'
       }
    }
}

task jenkinsOutput() {
    doLast {
        copy {
            with jarToCopy
            into "/data1/jenkins/workspace/global-libs"
        }
    }
}

task jenkinsBuild(type: GradleBuild) {
    tasks = ['jenkinsInput', 'jar', 'jenkinsOutput']
}
